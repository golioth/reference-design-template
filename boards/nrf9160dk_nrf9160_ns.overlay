/*
 * Copyright (c) 2023 Golioth, Inc.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

/ {
	aliases {
		click-uart = &arduino_serial;
		click-i2c = &arduino_i2c;
		golioth-led = &led2;
		rfid-led = &led3;
		click-spi = &arduino_spi;
		rfid-wakeup-pin = &rfid_wakeup_pin;
		rfid-data-ready-pin = &rfid_data_ready_pin;
	};

	gpios {
		compatible = "gpio-keys";
		
		rfid_wakeup_pin: rfid_wakeup_pin {
			gpios = <&gpio0 6 GPIO_ACTIVE_LOW>;   /* IN1 */
		};

		rfid_data_ready_pin: rfid_data_ready_pin {
			gpios = <&gpio0 2 GPIO_ACTIVE_LOW>;   /* IN0 */
		};

	};

};

&arduino_i2c {
	/* Needed for I2C writes used by libostentus */
	zephyr,concat-buf-size = <48>;
};

arduino_spi: &spi3 {
	status = "okay";
	cs-gpios = <&arduino_header 16 GPIO_ACTIVE_LOW>; /* D10 */
	
	rfid_click: rfid_click@0 {
		compatible = "rfid,click";
		spi-max-frequency = <1000000>;
		reg = <0>;
	};
};

&pinctrl {
	/*
	 * Arduino Uno provides the same SCL/SDA on two sets of pins, but the
	 * nRF9160-DK maps these pins to two different pairs of GPIO. When using
	 * the Arduino Uno Click Shield board, the P0.18/P0.19 pair must be used.
	 */
	i2c2_default: i2c2_default {
		group1 {
			psels = <NRF_PSEL(TWIM_SDA, 0, 18)>,
				<NRF_PSEL(TWIM_SCL, 0, 19)>;
		};
	};

	i2c2_sleep: i2c2_sleep {
		group1 {
			psels = <NRF_PSEL(TWIM_SDA, 0, 18)>,
				<NRF_PSEL(TWIM_SCL, 0, 19)>;
			low-power-enable;
		};
	};

	/*
	 * The default pin group includes RTS/CTS HW flow control, but the Arduino
	 * Uno Click Shield board does not connect these pins (only TX/RX are used).
	 * This keeps RX/TX on the same pins, but just removes RTS/CTS from the
	 * pin groups.
	 */
	uart1_default: uart1_default {
		group1 {
			psels = <NRF_PSEL(UART_TX, 0, 1)>,
				<NRF_PSEL(UART_RX, 0, 0)>;
		};
	};

	uart1_sleep: uart1_sleep {
		group1 {
			psels = <NRF_PSEL(UART_TX, 0, 1)>,
				<NRF_PSEL(UART_RX, 0, 0)>;
			low-power-enable;
		};
	};
	
	spi3_default: spi3_default {
		group1 {
			psels = <NRF_PSEL(SPIM_SCK, 0, 13)>,
				<NRF_PSEL(SPIM_MISO, 0, 12)>,
				<NRF_PSEL(SPIM_MOSI, 0, 11)>;
			bias-pull-up;
			nordic,drive-mode = <NRF_DRIVE_H0H1>;
		};
	};

	spi3_sleep: spi3_sleep {
		group1 {
			psels = <NRF_PSEL(SPIM_SCK, 0, 13)>,
				<NRF_PSEL(SPIM_MISO, 0, 12)>,
				<NRF_PSEL(SPIM_MOSI, 0, 11)>;
			low-power-enable;
		};
	};

};
